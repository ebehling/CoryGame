### ###  NOTES ### ### 
#used the keys in the owned tiles list as keys in the world diction to get to brokefast mountain dict
#World{playerInfo{"owned_tiles"}[0]}
### ### ### ### 

class Building:

    def __init__(self):
        self.buildingInfo = {}

    def editBuildingInfo(self, keyword, newValue):
        if type(keyword) == type(""):
            if type(newValue) == type(self.buildingInfo[keyword]):
                self.buildingInfo[keyword] += newValue

    def addNewStat(self, keyword, newValue):
        if type(keyword) == type(""):      #QUESTION FOR ELLIOT: HOW TO TEST TO MAKE SURE THE KEYWORD IS UNIQUE
            self.buildingInfo.update({keyword: newValue})

class Champion:

    def __init__(self, id):
        self.id = id # add this information into the dictionary when creating it -- champion.id()
        self.championInfo = {}

    
class World:
    def __init__(self):
        self.worldTileInfo = {"Name": "", "Population" : 0, "Pop Growth" : 2, "Earth Growth" : 0, "Air Growth" : 0, "Water Growth" : 0, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 0,  "Tile Ownership": False}

    def editTileInfo(self, keyword, newValue):
        if type(keyword) == type(""):
            if type(newValue) == type(self.worldTileInfo[keyword]):
                self.worldTileInfo[keyword] += newValue

    def addNewStat(self, keyword, newValue):
        if type(keyword) == type(""):      #QUESTION FOR ELLIOT: HOW TO TEST TO MAKE SURE THE KEYWORD IS UNIQUE
            self.worldTileInfo.update({keyword: newValue})



class Player:

    def __init__(self):
        self.playerInfo = {"Type": "Player", "ID": "player", "Name": "", "Earth Cores" : 100, "Air Cores" : 100 , "Water Cores" : 100, "owned_tiles" : {}, "owned_champions": {}}
        # self.stats["Name"] + str(len(worldTileList))
        

    def replacePlayerInfo(self, keyword, newValue):
        if type(keyword) == type(""):
            if type(newValue) == type(self.playerInfo[keyword]):
                self.playerInfo[keyword] += newValue

    def editNumberStats(self, keyword, change):
        if type(keyword) == type(""):
            if type(change) == type(1) or type(''):
                self.playerInfo[keyword] += change

    def addNewStat(self, keyword, newValue):
        if type(keyword) == type(""):      #QUESTION FOR ELLIOT: HOW TO TEST TO MAKE SURE THE KEYWORD IS UNIQUE
            self.playerInfo.update({keyword: newValue})

### ### ALL BASE GAME INFO GOES HERE ### ###
menuLabels=["Population:", "Pop Growth:", "Earth Cores:", "Air Cores:", "Water Cores:", "Earth Alignment:", "Air Alignment:", "Water Alignment:"]
worldTileNames=[ "Brokefast Mountains", "Wandering Forest (1)", "Eastern Highlands", "The Citadel", "Wandering Forest (2)", "Eastern Lowlands", "The Foglands"]
buildingTypes = ["Village", "Town", "City", "Fortress", "Citadel", "Palace", "Temple", "Lighthouse", "Watchtower", "Wall", "Training Ground", "Smith"]

playerNames = ["Cory", "Elliot", "Will", "Jack"]   

villageInfo = {"Type": "Building", "Building ID": "building", "Building Type": "Village", "Name": "", "Cost (Population)": 100, "Cost (Earth Cores)": 50, "Cost (Air Cores)": 0, "Cost (Water Cores)": 0, "Building Slots": 1, "Cost: (Village)": 0, "Cost: (Town)": 0}
townInfo = {"Type": "Building", "Building ID": "building", "Building Type": "Town", "Name": "", "Cost (Population)": 250, "Cost (Earth Cores)": 100, "Cost (Air Cores)": 25, "Cost (Water Cores)": 25, "Building Slots": 0, "Cost: (Village)": 1, "Cost: (Town)": 0}
cityInfo = {"Type": "Building", "Building ID": "building", "Building Type": "City", "Name": "", "Cost (Population)": 500, "Cost (Earth Cores)": 200, "Cost (Air Cores)": 50, "Cost (Water Cores)": 50, "Building Slots": 0, "Cost: (Village)": 0, "Cost: (Town)": 1}
buildingInfoList = [villageInfo, townInfo, cityInfo]
createdBuildingList = []

buildingTypes = ["Village", "Town", "City", "Fortress", "Citadel", "Palace", "Temple", "Lighthouse", "Watchtower", "Wall", "Training Ground", "Smith"]
worldTileDict = {"1": "Brokefast Mountains", "2": "Wandering Forest (1)", "3": "Eastern Highlands", "4": "The Citadel", "5": "Wandering Forest (2)", "6": "Eastern Lowlands", "7": "The Foglands"}

brokefastMountains = {"Name": "The Brokefast Mountains", "Population" : 10000, "Pop Growth" : 2, "Earth Growth" : 2, "Air Growth" : 1, "Water Growth" : 0, "Buildings": {}, "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 1,  "Tile Ownership": True}
wanderingForest1 = {"Name": "The Northern Wandering Forest","Population" : 10, "Pop Growth" : 3, "Earth Growth" : 2, "Air Growth" : 0, "Water Growth" : 1, "Buildings": {}, "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 2, "Tile Ownership": True}
easternHighlands = {"Name": "The Eastern Highlands", "Population" : 10, "Pop Growth" : 1, "Earth Growth" : 1, "Air Growth" : 2, "Water Growth" : 0, "Buildings": {}, "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 3, "Tile Ownership": True}
theCitadel = {"Name": "The Citadel", "Population" : 10, "Pop Growth" : 4, "Earth Growth" : 1, "Air Growth" : 1, "Water Growth" : 1, "Buildings": {}, "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 4, "Tile Ownership": True}
wanderingForest2 = {"Name": "The Southern Wandering Forest", "Population" : 10, "Pop Growth" : 3, "Earth Growth" : 1, "Air Growth" : 0, "Water Growth" : 2, "Buildings": {}, "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0} , "World Tile Number": 5, "Tile Ownership": True}
easternLowlands = {"Name": "The Eastern Lowlands", "Population" : 10, "Pop Growth" : 1, "Earth Growth" : 0, "Air Growth" : 2, "Water Growth" : 1, "Buildings": {}, "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 6, "Tile Ownership": True}
theFoglands = {"Name": "The Foglands", "Population" : 10, "Pop Growth" : 2, "Earth Growth" : 0, "Air Growth" : 1, "Water Growth" : 2, "Buildings": {}, "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 7, "Tile Ownership": True}
preWorld = [brokefastMountains, wanderingForest1, easternHighlands, theCitadel, wanderingForest2, easternLowlands, theFoglands]

theWinterKnight = {"Name": "The Winter Knight", "Affinity": "Water", "Earth Growth" : 0, "Air Growth" : 0, "Water Growth" : 1, "Champion ID": "champion", "Owner": '', "Champion Number": 1}
archibaldTheBrave = {"Name": "Archibald the Brave", "Affinity": "Earth", "Earth Growth" : 1, "Air Growth" : 0, "Water Growth" : 0, "Champion ID": "champion", "Owner": '', "Champion Number": 2}
theSunSummoner = {"Name": "The Sun Summoner", "Affinity": "Air", "Earth Growth" : 0, "Air Growth" : 1, "Water Growth" : 0, "Champion ID": "champion", "Owner": '', "Champion Number": 3}
Champions = [theWinterKnight, archibaldTheBrave, theSunSummoner]
createdChampionList = []

### ### ALL GAME FUNCTIONS OUTSIDE OF THE MAIN ITERATION GO HERE ### ###

def createPlayer(L):
    ''''''
    newPlayerList = {}
    count = 1
    for i in range(len(L)):
        newPlayer = Player()
        newPlayer.playerInfo["Name"] = L[i]
        newPlayer.playerInfo["ID"] = "player" + str(count)
        label = {newPlayer.playerInfo["Name"]: newPlayer.playerInfo}
        newPlayerList.update(label)

        count +=1
    return newPlayerList
       
def editPlayer(players, name, stat, change):
    '''NUMBERS ONLY'''
    for i in players:
        if type(change) == type(1):
            if name == players[i]["Name"]:
                players[i][stat] += change


def createWorld(L):
    '''takes a list L and returns a dictionary world built from the list with the info attached to tile numbers'''
    newWorld = {}
    count = 1
    for i in range(len(L)):
        newWorldTile = World()
        newWorldTile.worldTileInfo["Name"] = L[i]
        newWorldTile.worldTileInfo["ID"] = "worldtile" + str(count)
        strCount = str(count)
        label = {strCount: newWorldTile.worldTileInfo}
        newWorld.update(label)

        count +=1
    return newWorld


def createBuilding(L, createdBuildingList):
    '''input a building type and the createBuilding function will output an object of class Building with L's stats'''
    newBuilding = Building()
    buildingStats = newBuilding.buildingInfo 
    buildingStats.update(L)
    buildingStats["Building ID"] += str(len(createdBuildingList))
    createdBuildingList += [buildingStats["Building ID"]]
    
    return buildingStats


def createChampion(championInfo, createdChampionList):
    '''input a champion type and the createChamp function will output an object of class Champ with that champs stats'''
    newChampion = Champion()
    championStats = newChampion.championInfo 
    print(championStats)
    championStats.update(championInfo)
    championStats["Champion ID"] += str(len(createdChampionList))
    createdChampionList += [championStats["Champion ID"]]
    return championStats


def menu():
    """Prints the menu of options that the user can choose."""
    print()
    print("(0) ")
    print("(1) Enter a new turn number")
    print("(2) Advance to the next World Tile State")
    print("(3) ")
    print("(4) Change a Players Cores")
    print("(5) View or Edit a World Tile")
    print("(6) Add a new Player (not working)")
    print("(7) Change the Ownership of a tile")
    print("(8) Add a new champion to a player")
    print("(9) Break! (quit)")
    print()


def nextTurn(currentPlayers, World):
    '''advances the board to the next turn number and auto allocates player and world tile resources'''
    for Player in currentPlayers:
        if len(currentPlayers[Player]["owned_tiles"]) > 0:
            for tile in World:
                for worldTile in currentPlayers[Player]["owned_tiles"]:
                    if currentPlayers[Player]["owned_tiles"][worldTile] == World[tile]["Name"]:
                        currentPlayers[Player]["Earth Cores"] += World[tile]["Earth Growth"]
                        currentPlayers[Player]["Air Cores"] += World[tile]["Air Growth"]
                        currentPlayers[Player]["Water Cores"] += World[tile]["Water Growth"]
    for tile in World:
        World[tile]["Population"] += World[tile]["Pop Growth"]    
    for Player in currentPlayers: # add a way to increase champion affinity
        for champs in currentPlayers[Player]["owned_champions"]:
            currentPlayers[Player]["Earth Cores"] += currentPlayers[Player]["owned_champions"][champs]["Earth Growth"]
            currentPlayers[Player]["Air Cores"] += currentPlayers[Player]["owned_champions"][champs]["Air Growth"]
            currentPlayers[Player]["Water Cores"] += currentPlayers[Player]["owned_champions"][champs]["Water Growth"]


def coreEdit(playerName, coreType, difference, currentPlayers):
    if coreType == '1':
        coreType = "Earth Cores"
    if coreType == '2':
        coreType = "Air Cores"
    if coreType == '3':
        coreType = "Water Cores"
    if currentPlayers[playerName][coreType] + int(difference) > 0: 
        currentPlayers[playerName][coreType] += int(difference)
    else:
        print("Not sure what to do with that!")

    
def addTileOwnership(playerName, tile, currentPlayers, World):
    previousOwner = World[tile]["Tile Ownership"]
    #Elliot = previousOwner
    if World[tile]["Tile Ownership"] != playerName:
        World[tile]["Tile Ownership"] = playerName
        (currentPlayers[playerName]["owned_tiles"]).update({str(World[tile]["World Tile Number"]): World[tile]["Name"]})
    for Player in currentPlayers:
        print(Player)
        if previousOwner == currentPlayers[Player]["Name"] and previousOwner != playerName:
            dict = currentPlayers[Player]["owned_tiles"]
            del dict[tile]
            pass

def addChampionOwnership(playerName, championChoice, currentPlayers, World):
        for i in Champions:
            print(championChoice)
            print(type(championChoice))
            if i["Champion Number"] == int(championChoice):
                newChampion = createChampion(i, createdChampionList)
                (currentPlayers[playerName]["owned_champions"]).update({str(newChampion["Champion Number"]): newChampion})
                newChampion["Owner"] += playerName


def editWorldTile():
    print()
    tile = input("Enter the desired World Tile number: ")
    print("You have seleted", World[tile]["Name"])
    print('(1) Edit population (Current:', World[tile]["Population"],')')
    print('(2) Edit population growth (Current:', World[tile]["Pop Growth"],')')
    print('(3) Purchase or upgrade buildings')
    print('(4) Edit World Tile Affinites')
    print('(5) View World Tiles Combat Board information')
    print('(9) Leave')
    choice = input("What do you wish to do? ")
    if choice == '1':
        difference = input("Enter change in population ")
        World[tile]["Population"] = World[tile]["Population"] + int(difference)
    if choice == '2':
        difference = input("Enter change in population growth ")
        World[tile]["Pop Growth"] = World[tile]["Pop Growth"] + int(difference)
    if choice == '3':
        print()
        print("Here are the current buildings in", World[tile]["Name"], ':')
        print()
        if len(World[tile]["Buildings"]) != 0:
            print(World[tile]["Buildings"])      
        print()
        print("-----------------------------------------------------------")
        print("Current Options")     
        print("(1) Purchase Village:   (Cost: 100 Population)")
        print("(2) Purchase Town:      (Cost: 250 Population, 100 Earth Cores)")
        print("(3) Purchase City:      (Cost: 500 Population, 1 Town)")
        print("(13) Exit")
        print()
        buildingChoice = input("What would you like to do? ")
        print()
        if World[tile]["Available Building Slots"] == 0:
            pass
        elif buildingChoice == '1':
            if World[tile]["Population"] >= villageInfo["Cost (Population)"]:
                newBuilding = village.createBuilding(villageInfo)
                newName = villageInfo["Type"] #+ str(indexCounter)
                World[tile]["Buildings"] += {newName: newBuilding}
                #indexCounter += 1
                World[tile]["Population"] = World[tile]["Population"] - villageInfo["Cost (Population)"]
                World[tile]["Available Building Slots"] = World[tile]["Available Building Slots"] - 1
                World[tile]["Pop Growth"] = World[tile]["Pop Growth"] + 1
                World[tile]["Upgradeable Buildings"]["Village Count"] +=1
        elif buildingChoice == '2':
            if World[tile]["Population"] >= townInfo["Cost (Population)"]:
                if player["Earth Cores"] >= townInfo["Cost (Earth Cores)"]:
                    if World[tile]["Upgradeable Buildings"]["Village Count"] >= 1:
                        newBuilding = town.createBuilding(townInfo)
                        newName = townInfo["Type"] #+ str(indexCounter)
                        World[tile]["Buildings"] += {newName: newBuilding}
                        World[tile]["Population"] = World[tile]["Population"] - townInfo["Cost (Population)"]
                        player["Earth Cores"] -= townInfo["Cost (Earth Cores)"]
                        World[tile]["Pop Growth"] = World[tile]["Pop Growth"] + 1
                        World[tile]["Upgradeable Buildings"]["Village Count"] -=1
                        World[tile]["Upgradeable Buildings"]["Town Count"] +=1
        elif buildingChoice == '3':
            if World[tile]["Population"] >= cityInfo["Cost (Population)"]:
                if player["Earth Cores"] >= cityInfo["Cost (Earth Cores)"]:
                    if player["Air Cores"] >= cityInfo["Cost (Air Cores)"]:
                        if player["Water Cores"] >= cityInfo["Cost (Water Cores)"]:
                            if World[tile]["Upgradeable Buildings"]["Town Count"] >= 1:
                                newBuilding = city.createBuilding(cityInfo)
                                newName = cityInfo["Type"] #+ str(indexCounter)
                                World[tile]["Buildings"] += {newName: newBuilding}
                                World[tile]["Population"] = World[tile]["Population"] - cityInfo["Cost (Population)"]
                                player["Earth Cores"] -= cityInfo["Cost (Earth Cores)"]
                                player["Air Cores"] -= cityInfo["Cost (Air Cores)"]
                                player["Water Cores"] -= cityInfo["Cost (Water Cores)"]
                                World[tile]["Pop Growth"] = World[tile]["Pop Growth"] + 1
                                World[tile]["Upgradeable Buildings"]["Town Count"] -=1
                                World[tile]["Upgradeable Buildings"]["City Count"] +=1             
        else:
            pass
    if choice == '4':
        print("(1)Change Earth Affinty (Current:", World[tile]["Earth Growth"],')')
        print("(2)Change Air Affinty (Current:", World[tile]["Air Growth"],')')
        print("(3)Change Water Affinty (Current:", World[tile]["Water Growth"],')')
        choice2 = input("What do you wish to do?")
        difference = input("Enter change in affinity")
        if choice2 == '1':
            World[tile]["Earth Growth"] = World[tile]["Earth Growth"] + int(difference)
        if choice2 == '2':
            World[tile]["Air Growth"] = World[tile]["Air Growth"] + int(difference)
        if choice2 == '3':
            World[tile]["Water Growth"] = World[tile]["Water Growth"] + int(difference)
        else:
            pass
            
    else: 
        pass

### ### THE MAIN ITERATION LOOP ### ### 

def main():
    """The main user-interaction loop. All board and player 
    creation should happen before the while-true loop begins."""
    ### COUNTERS AND VARIABLE DATA ###
    turnNumber = 0

    ### PLAYER CREATION ###
    playerNames = ["Cory", "Elliot", "Will", "Jack"]   
    currentPlayers = createPlayer(playerNames) # This is a dictionary of the players with thier names as keywords to their stats

    (currentPlayers["Cory"]["owned_tiles"]).update({"1": "Brokefast Mountains"})
    
    ### WORLD TILE CREATION ### 
   
    worldTileNames = [ "Brokefast Mountains", "Wandering Forest (1)", "Eastern Highlands", "The Citadel", "Wandering Forest (2)", "Eastern Lowlands", "The Foglands"]
    worldTileDict = {"1": "Brokefast Mountains", "2": "Wandering Forest (1)", "3": "Eastern Highlands", "4": "The Citadel", "5": "Wandering Forest (2)", "6": "Eastern Lowlands", "7": "The Foglands"}
    brokefastMountains = {"Name": "Brokefast Mountains", "Population" : 10000, "Pop Growth" : 2, "Earth Growth" : 2, "Air Growth" : 1, "Water Growth" : 0, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 1,  "Tile Ownership": 'Cory'}
    wanderingForest1 = {"Name": "Wandering Forest (1)", "Population" : 10, "Pop Growth" : 3, "Earth Growth" : 2, "Air Growth" : 0, "Water Growth" : 1, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 2, "Tile Ownership": ''}
    easternHighlands = {"Name": "Eastern Highlands", "Population" : 10, "Pop Growth" : 1, "Earth Growth" : 1, "Air Growth" : 2, "Water Growth" : 0, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 3, "Tile Ownership": ''}
    theCitadel = {"Name": "The Citadel", "Population" : 10, "Pop Growth" : 4, "Earth Growth" : 1, "Air Growth" : 1, "Water Growth" : 1, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 4, "Tile Ownership": ''}
    wanderingForest2 = {"Name": "Wandering Forest (2)", "Population" : 10, "Pop Growth" : 3, "Earth Growth" : 1, "Air Growth" : 0, "Water Growth" : 2, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0} , "World Tile Number": 5, "Tile Ownership": ''}
    easternLowlands = {"Name": "Eastern Lowlands", "Population" : 10, "Pop Growth" : 1, "Earth Growth" : 0, "Air Growth" : 2, "Water Growth" : 1, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 6, "Tile Ownership": ''}
    theFoglands = {"Name": "The Foglands", "Population" : 10, "Pop Growth" : 2, "Earth Growth" : 0, "Air Growth" : 1, "Water Growth" : 2, "Buildings": [], "Available Building Slots": 4, "Upgradeable Buildings": {"Village Count": 0, "Town Count": 0, "City Count": 0 }, "World Tile Number": 7, "Tile Ownership": ''}
    preWorld = [brokefastMountains, wanderingForest1, easternHighlands, theCitadel, wanderingForest2, easternLowlands, theFoglands]

    World = createWorld(worldTileNames)
    #preWorldCount = 0 
    # for i in World: # For my preset world here 
    #     id = {"ID": i["ID"]}
    #     print(i["Population"])
    #     i = {}
    #     i.update(preWorld[preWorldCount])
    #     print(i["Population"])
    #     i.update(id)
    #     preWorldCount += 1
    for tile in World: 
        for area in range(len(preWorld)):
            if World[tile]["Name"] == preWorld[area]["Name"]:
                id = {"ID": World[tile]["ID"]}
                World[tile] = {}
                (World[tile]).update(preWorld[area])
                (World[tile]).update(id)

    ### BUILDING CREATION ###

    villageInfo = {"Type": "Building", "Building ID": "building", "Building Type": "Village", "Name": "", "Cost (Population)": 100, "Cost (Earth Cores)": 50, "Cost (Air Cores)": 0, "Cost (Water Cores)": 0, "Building Slots": 1, "Cost: (Village)": 0, "Cost: (Town)": 0}
    townInfo = {"Type": "Building", "Building ID": "building", "Building Type": "Town", "Name": "", "Cost (Population)": 250, "Cost (Earth Cores)": 100, "Cost (Air Cores)": 25, "Cost (Water Cores)": 25, "Building Slots": 0, "Cost: (Village)": 1, "Cost: (Town)": 0}
    cityInfo = {"Type": "Building", "Building ID": "building", "Building Type": "City", "Name": "", "Cost (Population)": 500, "Cost (Earth Cores)": 200, "Cost (Air Cores)": 50, "Cost (Water Cores)": 50, "Building Slots": 0, "Cost: (Village)": 0, "Cost: (Town)": 1}
    buildingInfoList = [villageInfo, townInfo, cityInfo]
    createdBuildingList = []


    buildingTypes = ["Village", "Town", "City", "Fortress", "Citadel", "Palace", "Temple", "Lighthouse", "Watchtower", "Wall", "Training Ground", "Smith"]

    ### CHAMPION CREATION ###

    theWinterKnight = {"Name": "The Winter Knight", "Affinity": "Water", "Earth Growth" : 0, "Air Growth" : 0, "Water Growth" : 1, "Champion ID": "champion", "Owner": '', "Champion Number": 1}
    archibaldTheBrave = {"Name": "Archibald the Brave", "Affinity": "Earth", "Earth Growth" : 1, "Air Growth" : 0, "Water Growth" : 0, "Champion ID": "champion", "Owner": '', "Champion Number": 2}
    theSunSummoner = {"Name": "The Sun Summoner", "Affinity": "Air", "Earth Growth" : 0, "Air Growth" : 1, "Water Growth" : 0, "Champion ID": "champion", "Owner": '', "Champion Number": 3}
    Champions = [theWinterKnight, archibaldTheBrave, theSunSummoner]
    createdChampionList = []
    
   ### THE USER INTERACTION LOOP ###
    while True:
        print()
        print("---------------------------------------")
        for i in currentPlayers:
            print(currentPlayers[i])
            print()
        for tile in World:
            print(World[tile])
            print()
        # for tile in World:
        #     print(World[tile]["Name"],': Population:', World[tile]["Population"])
        ### PRINTS THE MENU OF OPTIONS AND CHECKS INPUT ###
        menu()
        choice = input("Choose an option: ")
        
        try:
            choice = int(choice)   # Make into an int
        except:
            print("I didn't understand your input! Continuing...")
            continue
        ### CHOICE SELECTION ###
        if choice == 9:    # We want to quit
            break          # Leaves the while loop altogether
        elif choice == 0:  # Enters a new World Tile State (DELETES CURRENT STATE!!!!)
            pass
        elif choice == 1: # CHANGE THE CURRENT TURN NUMBER (DOES NOT EFFECT TIME)
            newTurnNumber = input("Enter a new turn number: ") 
            try: 
                newTurnNumber = eval(newTurnNumber) # eval runs Python's interpreter! Note: Danger!
                if type(newTurnNumber) != type(int): 
                    print("That didn't seem like a number. Not changing the turn number.")
                else: 
                    turnNumber = newTurnNumber  # Here, things were OK
            except:
                print("I didn't understand your input. Not changing the turn number.")
        elif choice == 2:  # Advance to the next world tile state
            nextTurn(currentPlayers, World)
            turnNumber += 1
        elif choice == 3:  # Prints the current World Tile State
            print()
            
                       

        elif choice == 4: #Edit a Players cores 

            playerName = input("Select the Player's cores you wish to edit: ")
            print("(1) Earth Cores")
            print("(2) Air Cores")
            print("(3) Water Cores")
            coreType = input("Select the core type you wish to edit: ")
            difference = input("Input the change in cores ")

            coreEdit(playerName, coreType, difference, currentPlayers)
        
        elif choice == 5: #Edit a World tiles population stats
            editWorldTile()
        
        elif choice == 7:
            newOwner = input("Which player is getting the new tile? ")
            tileNumber = input("What tile do you wish to change the ownership of")
            addTileOwnership(newOwner, tileNumber, currentPlayers, World)
            print()

        elif choice == 8:
            print("The current champions are:")
            thisCount = 1
            for i in Champions:
                print("(", thisCount, "): ", i["Name"])
                thisCount += 1
            newChampion = input("What Champion Would you like to add? ")
            newOwner = input("Which player is getting the new Champion? ")
            addChampionOwnership(newOwner,newChampion, currentPlayers, World)

        else:
            print(choice, " ?      That's not on the menu!")

    print()
    print("See you yesterday!")

